// CS2125 11/30
// ambiguity-mi.cpp
// -- resolving ambiguity of inheriting the same names from
// multiple base classes in a multiple inheritance (MI) hierarchy
// Multiple inheritance (MI) means inheriting from more than one base class.
// Consider the MI hierarchy described in dude.hpp. When MI enters the design
// picture, it becomes possible to inherit the same name (e.g., function, 
// typedef, etc.) from more than one base class. This leads to ambiguity when
// using a name (such as calling a function) that exists in multiple base classes.

#include <iostream>
#include <cstdlib>
#include <ctime>
#include "dude.hpp"

int main() {
  // Dude class hierarchy uses pseudo-random numbers generated by
  // standard library - therefore, make sure to set the generator's seed
  srand(unsigned(time(0)));

  // Because of MI, the same names (name() and punch()) are inherited from
  // both the first base class SubDude and the second base class BadDude
  OddDude odd("O");
  
  // Therefore, the calls to odd.name() and odd.punch() are ambiguous.
  // This is in accordance with C++ rules for resolving calls to overloaded
  // functions: C++ first identifies the function that's the best match for the
  // calls odd.name() and odd.punch(). Here, both name and punch are ambiguous
  // names during name lookup, so neither function overload resolution nor
  // best match determination takes place.
  //odd.name(); // ambiguous: which name(): SubDude::name() or BadDude::name()
  //odd.punch(); // ambiguous: which punch(): SubDude::punch() or BadDude::punch()?
  
  // To resolve the ambiguity, you must use the scope resolution operator to 
  // specify which base class's function to call: odd.SubDude::name() or 
  // odd.BadDude::name().
  // Similarly using scope operator ::, you can disambiguate ambiguous
  // call to punch(): odd.SubDude::punch() or odd.BadDude::punch().
  std::cout << odd.SubDude::name() << " punch "
       << (odd.BadDude::punch() ? "hits" : "misses") << std::endl;
  SubDude *sdp = static_cast<SubDude*>(&odd); // up-cast from derived-to-base
  std::cout << sdp->name() << " punch "
       << (sdp->punch() ? "hits" : "misses") << std::endl;
}
